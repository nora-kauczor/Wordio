package org.example.backend;

import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class VocabServiceTest {
    private final VocabRepo mockVocabRepo = mock(VocabRepo.class);
    private final VocabService vocabService = new VocabService(mockVocabRepo);

    @Test
    void getAllVocabs_ShouldReturnAllVocabs_whenCalled() {
        Vocab testVocab = new Vocab("000", "la prueba", "test",
                "", "Spanish", List.of());
        List<Vocab> testListOfVocabs = List.of(testVocab);
        when(mockVocabRepo.findAll()).thenReturn(testListOfVocabs);
        List<Vocab> expected = testListOfVocabs;
        List<Vocab> actual = vocabService.getAllVocabs();
        assertEquals(expected, actual);
        verify(mockVocabRepo).findAll();
    }

    @Test
    void getVocab_shouldReturnSpecificVocab_whenCalledWithItsId() {
        Vocab testVocab = new Vocab("000", "la prueba", "test",
                "", "Spanish", List.of());
        when(mockVocabRepo.findById("000")).thenReturn(Optional.of(testVocab));
        Optional<Vocab> expected = Optional.of(testVocab);
        Optional<Vocab> actual = mockVocabRepo.findById("000");
        assertEquals(expected, actual);
        verify(mockVocabRepo).findById("000");
    }

    @Test
    void getVocab_shouldThrowNoSuchElementException_whenCalledWithNonexistentId() {
        when(mockVocabRepo.findById("000")).thenThrow(NoSuchElementException.class);
        assertThrows(NoSuchElementException.class, () -> mockVocabRepo.findById("000"));
        verify(mockVocabRepo).findById("000");
    }

    @Test
    void createVocab_shouldReturnNewVocabObject_whenCalledWithVocabDTO() {
        VocabDTO testDTO = new VocabDTO("la prueba", "test",
                "", "Spanish", List.of());
        Vocab testVocab = new Vocab("Id generated by MongoDB", "la prueba", "test",
                "", "Spanish", List.of());
        when(mockVocabRepo.save(any(Vocab.class))).thenReturn(testVocab);
        Vocab actual = vocabService.createVocab(testDTO);
        Vocab expected = testVocab;
        assertEquals(expected, actual);
        verify(mockVocabRepo).save(any(Vocab.class));
    }

    @Test
    void editVocab_shouldReturnEditedVocab_whenCalledWithThisVeryVocab() {
        Vocab editedVocab = new Vocab("000", "la prueba", "test",
                "added infotext", "Spanish", List.of());
        when(mockVocabRepo.save(editedVocab)).thenReturn(editedVocab);
        Vocab expected = editedVocab;
        Vocab actual = vocabService.editVocab(expected);
        assertEquals(expected, actual);
        verify(mockVocabRepo).save(editedVocab);
    }



}